#TCP Socket Server
#Author: jake-young-dev
#Requires: Python 3

## Server can be run on any system

#imports
import socket, subprocess, os, sys

#Class object
class Server(object):

    #creating server
    def __init__(self):
        #clear system for readability
        systemOS = sys.platform
        if "win" in systemOS:
            os.system("cls")
            self.getWindowsIP()
        else:
            os.system("clear")
            self.getLinuxIP()
        #set hostname
        self.host = socket.gethostname()

    #start server
    def start(self):
       #creating socket
       self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       #bind server
       self.sock.bind((self.host, 9876))
       print("Server@" + self.IP + " has started.\n")

    #connect to client
    def connect(self):
        #wait for client
        print("Waiting for client connection...\n")
        #listen for 1 connection
        self.sock.listen(1)

        #accept connection
        connection, cli = self.sock.accept()
        #save client
        self.client = cli[0]
        print("Client@" + self.client + " connected.\n")

        ##Interact with client here
        loop = True
        while loop:
            msg = connection.recv(1024)
            if msg:
                decodeMsg = msg.decode().rstrip()
                print("Client@" + self.client + " sent: " + decodeMsg)
                if decodeMsg == "exit":
                    reply = "closing".encode()
                    connection.sendall(reply)
                    break
                elif decodeMsg == "os":
                    reply = sys.platform.encode()
                    connection.sendall(reply)
        ##

        print("\nServer@" + self.IP + " closed.\n")
        connection.close()
        self.sock.close()
        exit()
    
    #getting system IP, windows
    def getWindowsIP(self):
        #running ipconfig command
        response = subprocess.check_output("ipconfig")
        #decoding command response
        dResponse = response.decode()
        #splitting response by newline
        addr = str(dResponse).split("\n")
        #search thru lines for IPv4
        for ip in addr:
            if "IPv4" in ip:
                #found ip, saving the trimmed version
                temp = ip.split(" ")
                self.IP = str(temp[len(temp)-1]).rstrip()

    #getting system IP, linux
    def getLinuxIP(self):
        #running ifconfig command
        response = subprocess.check_output("ifconfig wlan0", shell=True)
        #decoding response
        dResponse = response.decode()
        #splitting response by newline
        addr = str(dResponse).split("\n")
        #search thru lines for inet
        for ip in addr:
            if "inet" in ip:
                #found ip, saving trimmed version
                temp = ip.split(" ")
                self.IP = temp[9].rstrip()


#Python main function
if __name__ == "__main__":
    #creating server object
    localServer = Server()
    localServer.start()
    localServer.connect()